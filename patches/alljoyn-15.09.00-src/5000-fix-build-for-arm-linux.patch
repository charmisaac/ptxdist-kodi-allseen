Index: alljoyn-15.09.00-src/build_core/conf/linux/SConscript
===================================================================
--- a/build_core/conf/linux/SConscript
+++ b/build_core/conf/linux/SConscript
@@ -20,10 +20,27 @@ import os
 vars = Variables()
 vars.Add(BoolVariable('GCOV', 'Compile with gcov support', 'no'))
 vars.Add(BoolVariable('ASAN', 'Enable Address Sanitizer runtime checks', 'no'))
+vars.Add('TARGET_CC', 'OpenWRT C compiler', os.environ.get('TARGET_CC'))
+vars.Add('TARGET_CFLAGS', 'OpenWRT C compiler flags', os.environ.get('TARGET_CFLAGS'))
+vars.Add('TARGET_CPPFLAGS', 'OpenWRT C pre-processor compiler flags', os.environ.get('TARGET_CPPFLAGS'))
+vars.Add('TARGET_CXX', 'OpenWRT C++ compiler', os.environ.get('TARGET_CXX'))
+vars.Add('TARGET_LINK', 'OpenWRT Linker', os.environ.get('TARGET_CC')) # Normally use the C compiler for linking.
+vars.Add('TARGET_LINKFLAGS', 'OpenWRT Linker flags', os.environ.get('TARGET_LDFLAGS'))
+vars.Add('TARGET_AR', 'OpenWRT Archiver', os.environ.get('TARGET_AR'))
+vars.Add('TARGET_RANLIB', 'OpenWRT Archive Indexer', os.environ.get('TARGET_RANLIB'))
+vars.Add('STAGING_DIR', 'OpenWRT staging dir', os.environ.get('STAGING_DIR'))
 vars.Update(env)
 
 Help(vars.GenerateHelpText(env))
 
+# Get the compiler flags OpenWrt requires.
+flags = env.ParseFlags(' '.join([env['TARGET_CFLAGS'], env['TARGET_CPPFLAGS'], env['TARGET_LINKFLAGS']]))
+
+# Put OpenWrt build paths in environment varaibles so GCC will search those
+# paths after paths specified with -I and -L.
+env['ENV']['CPATH']=':'.join(flags['CPPPATH'])
+env['ENV']['LIBRARY_PATH']=':'.join(flags['LIBPATH'])
+
 config = Configure(env, custom_tests = { 'CheckCXXFlag' : CheckCXXFlag })
 if not config.CheckCXXFlag('-std=c++11'):
    if not config.CheckCXXFlag('-std=c++0x'):
Index: alljoyn-15.09.00-src/build_core/conf/linux/arm/SConscript
===================================================================
--- a/build_core/conf/linux/arm/SConscript
+++ b/build_core/conf/linux/arm/SConscript
@@ -17,8 +17,10 @@ Import('env')
 import os
 
 # Linux specific flags
-env.Append(CPPFLAGS=['-march=armv6',
-                     '-mthumb-interwork'])
+env.Append(CPPFLAGS=[os.environ.get('CFLAGS')])
+#	os.environ.get('CFLAGS')])
+env.Append(LINKFLAGS=[os.environ.get('SSL_LIBS'), os.environ.get('CAP_LIBS')])
+env['ENV']['PATH'] = os.environ['PATH']
 
 # Use the OpenEmbedded cross-compilation environment
 vars = Variables()
