Index: x265_1.8/build/linux/make-Makefiles.bash
===================================================================
--- a/build/linux/make-Makefiles.bash	2015-11-12 11:32:42.221342508 +0800
+++ b/build/linux/make-Makefiles.bash	2015-11-12 11:33:22.473757932 +0800
@@ -1,3 +1,6 @@
 #!/bin/bash
+
+CROSS="-DCMAKE_TOOLCHAIN_FILE=cmake_toolchain.txt"
+
 # Run this from within a bash shell
 cmake -G "Unix Makefiles" ../../source && ccmake ../../source
Index: x265_1.8/source/CMakeLists.txt
===================================================================
--- a/source/CMakeLists.txt
+++ b/source/CMakeLists.txt
@@ -58,8 +58,12 @@ elseif(POWERMATCH GREATER "-1")
     add_definitions(-DX265_ARCH_POWER=1)
 elseif(${SYSPROC} STREQUAL "armv6l")
     message(STATUS "Detected ARM target processor")
-    set(ARM 1)
+    set(ARMV6 1)
     add_definitions(-DX265_ARCH_ARM=1 -DHAVE_ARMV6=1)
+elseif(${SYSPROC} STREQUAL "armv7l")
+    message(STATUS "Detected ARMV7 system processor")
+    set(ARMV7 1)
+    add_definitions(-DX265_ARCH_ARM=1 -DHAVE_ARMV6=1 -DHAVE_NEON=0)
 else()
     message(STATUS "CMAKE_SYSTEM_PROCESSOR value `${CMAKE_SYSTEM_PROCESSOR}` is unknown")
     message(STATUS "Please add this value near ${CMAKE_CURRENT_LIST_FILE}:${CMAKE_CURRENT_LIST_LINE}")
@@ -169,8 +173,8 @@ if(GCC)
     elseif(X86 AND NOT X64)
         add_definitions(-march=i686)
     endif()
-    if(ARM)
-        add_definitions(-march=armv6 -mfloat-abi=hard -mfpu=vfp)
+    if(ARMV7)
+        add_definitions(-march=armv7-a -mfloat-abi=hard -mfpu=vfpv3-d16)
     endif()
     if(FPROFILE_GENERATE)
         if(INTEL_CXX)
Index: x265_1.8/source/common/cpu.cpp
===================================================================
--- a/source/common/cpu.cpp
+++ b/source/common/cpu.cpp
@@ -37,7 +37,7 @@
 #include <machine/cpu.h>
 #endif
 
-#if X265_ARCH_ARM && !defined(HAVE_NEON)
+#if X265_ARCH_ARM && (!defined(HAVE_NEON) || HAVE_NEON==0)
 #include <signal.h>
 #include <setjmp.h>
 static sigjmp_buf jmpbuf;
@@ -356,7 +356,7 @@ uint32_t cpu_detect(void)
     // which may result in incorrect detection and the counters stuck enabled.
     // right now Apple does not seem to support performance counters for this test
 #ifndef __MACH__
-    flags |= PFX(cpu_fast_neon_mrc_test)() ? X265_CPU_FAST_NEON_MRC : 0;
+    // flags |= PFX(cpu_fast_neon_mrc_test)() ? X265_CPU_FAST_NEON_MRC : 0;
 #endif
     // TODO: write dual issue test? currently it's A8 (dual issue) vs. A9 (fast mrc)
 #endif // if HAVE_ARMV6
